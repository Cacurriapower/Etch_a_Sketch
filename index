<!DOCTYPE html>
<html lang="en_US">
  <head>
    <meta charset="utf-8">
    <title>Etch a sketch</title>
    <link rel = "stylesheet" type = "text/css" href = "style.css"/>
  </head>
  <body>
    <button>Reset</button>
  </body>
  <script>
      const html = document.querySelector('html');
      const container = document.createElement('div');
      const button = document.querySelector('button');
      container.setAttribute('class', 'container');
      html.appendChild(container);
      button.addEventListener('click', reset);
      createElements(16);
      
      function createElements(value){
        const limit = value * value;
        let count = 0;
        for(let i = 0; i < limit; ++i){
          const newDiv = document.createElement('div');
          newDiv.setAttribute('id', `son${count++}`);
          container.appendChild(newDiv);
        }
        createGrid(value);
        return;
      }
      
      function createGrid(value){
        let count = 0;
        for(let i = 1; i <= value; ++i){
          for(let j= 1; j <= value; ++j){
            const newDiv = document.getElementById(`son${count++}`);
            newDiv.setAttribute('style', `grid-row: ${i}; grid-column: ${j}; `);
            newDiv.setAttribute('class', `unhovered`);
            newDiv.addEventListener('mouseover', changeBackground);
          }
        }
        return;
      }
      
      function changeBackground(e){
          const newDiv = document.getElementById(`${e.target.id}`);
          const attributes = newDiv.getAttribute('style');
          if(newDiv.className === 'unhovered'){
            newDiv.setAttribute('class', 'hovered');
            newDiv.setAttribute('style', `${attributes}background-color: ${rgbRandomizer()}; `);
          }else{
            newDiv.setAttribute('style', `${darkener(attributes)}`);
          }
          return;
      }

      function reset(){
        while (container.firstChild) {
          container.removeChild(container.firstChild);
        }
        createElements(prompt('The grid is a square of n x n elements. New value of n?'));
        return;
      }

      function rgbRandomizer(){
        const r = Math.floor(Math.random() * 255);
        const g = Math.floor(Math.random() * 255);
        const b = Math.floor(Math.random() * 255);
        const rgb = (`rgb(${r}, ${g}, ${b})`);
        return rgb; 
      }

      function darkener(string){
        let indexStart = string.indexOf('(');
        let indexEnd = string.lastIndexOf(')');
        let newString = string.slice(indexStart, ++indexEnd);
        indexEnd = newString.indexOf(',');
        let r = Number(newString.slice(1, indexEnd));
        newString = newString.slice(++indexEnd);
        indexEnd = newString.indexOf(',');
        let g = Number(newString.slice(0, indexEnd));
        newString = newString.slice(++indexEnd);
        indexEnd = newString.indexOf(')');
        let b = Number(newString.slice(0, indexEnd));
        string = string.slice(0, (string.indexOf('rgb') - 1));
        r = Math.floor(r * 0.9);
        g = Math.floor(g * 0.9);
        b = Math.floor(b * 0.9);
        return `${string} rgb(${r}, ${g}, ${b})`;         
      }
  </script>
</html>